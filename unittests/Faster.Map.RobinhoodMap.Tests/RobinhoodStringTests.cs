using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Faster.Map.RobinHoodMap.Tests
{
    public class RobinhoodStringTests
    {
        [Theory]
        [InlineData(1)]
        [InlineData(10)]
        [InlineData(100)]
        [InlineData(1000)]
        [InlineData(10000)]
        [InlineData(100000)]
        public void Get_Strings_Return_Succesful(uint amount)
        {
            // Arrange
            var map = new RobinhoodMap<string, string>();

            for (uint i = 0; i < amount; i++)
            {
                map.Emplace(i.ToString(), Guid.NewGuid().ToString());
            }

            for (uint i = 0; i < amount; i++)
            {
                // Act
                var result = map.Get(i.ToString(), out var x);
                if (!result)
                {
                    // Assert
                    Assert.True(result, $"{x} failed");
                }
            }
        }

        [Fact]
        public void Get_Strings_Return_Succesful_PartTwo()
        {
            // Arrange
            var map = new RobinhoodMap<string, string>();

            for (uint ii = 0; ii < 10000; ii++)
            {
                var result = map.Emplace(ii.ToString(), ii.ToString());
                if (!result)
                {
                    Assert.Fail(ii.ToString());
                }
            }

            for (uint ii = 0; ii < 10000; ii++)
            {
                // Act
                var result = map.Get(ii.ToString(), out var x);

                if (!result)
                {
                    Assert.Equal(10000, map.Count);
                    Assert.Fail(string.Join(",", map.Keys.ToArray()));
                }
            }
        }


        [Fact]

        public void Get_Strings_Return_Succesful_PartThree()
        {
            for (uint ii = 0; ii < 1000; ii++)
            {
                var keys = new List<uint>
            {
                    344,191,159,111,83,484,954,899,640,751,335,242,276,780,741,496,497,696,387,755,713,270,88,763,742,238,996,144,585,126,23,48,991,190,845,813,169,642,274,986,736,526,392,926,836,829,248,399,958,630,448,673,591,579,487,900,620,296,451,81,943,783,243,831,397,162,513,881,259,230,44,922,304,50,368,851,819,870,746,323,548,576,180,46,698,118,295,289,882,156,441,60,592,395,201,253,416,445,194,217,211,688,36,976,322,827,396,634,100,130,906,422,251,108,80,462,420,693,864,431,468,427,76,366,972,474,932,347,623,685,293,321,208,256,772,629,284,888,616,389,401,791,104,910,610,797,288,350,203,760,135,309,149,142,699,11,466,327,867,78,598,718,278,70,384,285,725,626,658,921,672,625,583,117,841,820,570,287,975,716,405,260,657,636,221,74,662,794,57,668,315,89,303,419,653,394,244,613,342,904,32,146,567,114,840,318,97,425,561,407,478,519,729,970,329,543,139,773,541,684,894,649,514,862,671,90,428,847,215,99,361,508,443,423,726,977,860,839,202,532,37,837,776,26,153,769,778,377,292,877,378,939,403,18,747,643,17,121,520,390,695,581,607,621,175,454,55,177,465,273,376,35,822,717,528,843,553,109,62,995,612,983,666,408,788,30,170,54,931,421,370,511,735,559,334,320,901,444,457,452,587,675,715,246,670,815,271,853,224,225,647,68,286,628,116,826,56,896,766,128,124,575,967,842,458,566,929,994,710,206,849,800,557,464,209,140,790,308,16,455,733,71,207,830,802,231,61,866,883,486,835,638,266,633,720,193,373,848,472,132,43,600,375,388,141,343,333,58,65,917,962,469,749,317,754,825,518,908,237,502,490,687,960,200,53,891,534,865,59,226,874,821,521,744,63,632,13,915,609,440,984,859,449,357,933,324,232,770,597,624,828,252,210,861,782,911,667,885,167,150,524,337,294,125,186,69,33,808,721,184,173,593,869,501,530,107,884,985,705,544,774,711,409,354,948,367,239,949,595,631,152,325,442,495,306,123,968,29,183,467,10,686,507,172,989,786,522,556,301,832,281,87,212,447,391,134,255,165,973,796,905,873,196,280,533,181,412,993,410,402,938,332,618,353,435,340,73,856,558,302,608,79,535,920,594,531,868,635,316,21,512,880,363,980,328,229,66,691,6,799,965,459,907,814,809,471,538,245,12,7,369,942,806,664,569,886,112,959,52,500,228,307,951,810,542,374,51,480,219,510,463,300,506,944,204,846,775,893,654,103,690,694,473,433,195,379,852,934,539,227,185,872,714,336,857,49,723,182,168,761,438,136,789,199,622,198,491,417,855,279,540,879,171,823,267,554,47,45,351,213,898,216,120,550,912,992,700,360,411,272,731,732,663,131,740,777,902,546,712,923,950,743,214,498,957,627,709,481,974,313,4,875,311,562,64,560,446,990,614,429,611,529,936,679,359,233,792,771,676,265,127,2,805,590,599,147,341,952,589,42,702,586,439,24,953,824,703,660,971,9,978,563,371,648,937,187,785,483,895,574,432,106,504,779,955,555,38,619,946,764,119,456,707,963,470,945,393,509,115,677,876,101,235,903,573,793,482,67,739,930,897,314,188,358,234,762,801,759,499,98,503,730,258,580,637,982,617,426,20,999,697,205,364,72,178,602,767,682,578,31,1,681,924,807,890,381,476,940,708,811,105,174,750,143,339,489,298,34,86,572,222,84,218,356,706,551,96,349,261,817,728,997,148,3,605,947,678,348,493,834,596,0,241,310,326,987,752,494,756,436,192,816,179,400,689,346,82,424,415,798,988,505,8,413,250,737,927,460,719,545,724,453,603,914,338,704,85,269,488,154,919,133,176,282,352,129,981,382,77,758,517,299,14,461,604,477,753,804,966,565,312,639,158,655,527,137,406,956,650,122,738,768,692,275,787,909,91,319,683,844,264,833,969,25,547,665,515,163,913,330,5,745,437,918,398,291,979,450,40,197,249,240,236,161,110,568,892,925,383,39,928,404,781,850,525,145,263,268,854,588,537,916,290,615,606,998,871,701,674,331,887,889,113,652,644,434,651,858,863,345,157,41,15,355,757,641,365,164,160,941,784,601,485,277,803,93,680,254,283,380,552,669,362,661,247,151,262,516,727,75,646,386,102,523,418,584,645,220,961,385,297,92,795,475,372,257,582,878,189,138,305,935,414,549,734,430,94,479,19,95,22,812,28,818,571,492,166,223,722,765,964,536,659,748,656,155,27,564,577,838
                         };

                // Arrange
                var map = new RobinhoodMap<string, string>();

                foreach (var key in keys)
                {
                    map.Emplace(key.ToString(), key.ToString());
                }

                foreach (var key in keys)
                {
                    // Act
                    var result = map.Get(key.ToString(), out var x);

                    if (!result)
                    {
                        Assert.Fail(key.ToString());
                    }
                }
            }
        }

        [Fact]
        public void Get_Strings_Return_Succesful_Partfour()
        {
            for (uint ii = 0; ii < 1000; ii++)
            {
                var keys = new List<uint>
            {
             177,728,490,42,382,196,234,964,439,380,307,269,270,882,690,991,806,745,290,850,297,957,716,93,186,79,694,198,456,299,422,375,334,631,94,682,232,897,857,650,230,978,584,967,792,877,831,131,643,710,848,552,73,453,70,605,391,371,582,547,183,725,892,531,655,617,720,514,53,522,929,510,753,165,5,927,970,487,615,601,424,441,815,935,776,135,255,319,416,373,316,224,628,535,19,670,921,866,664,920,399,750,213,729,248,798,936,286,0,333,917,886,461,609,130,481,466,928,711,226,85,57,32,941,486,872,159,546,91,337,256,500,459,727,739,556,539,721,317,257,313,835,157,431,512,702,681,644,627,419,636,849,359,988,746,908,800,352,844,830,997,71,822,578,541,384,859,807,294,999,115,361,718,150,277,74,272,985,50,687,166,974,899,126,887,216,68,890,378,12,437,362,852,662,968,548,44,938,633,237,273,635,418,105,960,200,589,194,346,567,312,910,288,919,13,292,624,296,878,225,395,790,323,450,367,90,509,801,489,125,314,528,118,575,92,932,287,980,117,483,478,947,873,812,469,515,293,516,41,381,811,488,756,171,542,207,119,396,915,774,498,23,632,285,102,18,394,861,821,20,129,420,961,69,922,54,16,736,744,462,276,868,430,638,84,563,63,227,202,47,154,485,211,661,871,827,674,142,948,349,348,412,795,502,351,785,156,100,75,281,266,734,167,612,467,244,803,124,452,717,464,989,906,496,622,686,907,517,425,641,602,714,402,341,735,443,9,161,104,360,573,338,620,986,916,245,824,347,168,979,271,537,817,888,598,22,592,719,473,274,454,252,204,981,3,569,379,315,649,4,78,826,128,895,203,937,40,771,647,623,893,426,414,553,740,320,309,58,479,820,279,388,170,151,668,816,46,472,377,794,912,322,231,357,201,942,191,366,345,814,120,95,778,761,759,962,833,700,291,704,208,133,217,853,782,228,376,61,344,199,261,808,797,175,562,436,182,634,545,43,403,971,17,523,295,599,470,581,909,676,840,658,278,758,82,561,356,21,959,891,195,789,651,233,558,525,587,527,576,565,836,149,666,772,219,411,526,626,259,760,146,242,706,109,691,742,923,813,363,72,283,538,429,342,246,796,392,393,465,659,264,733,585,96,238,212,614,440,106,611,249,111,865,289,275,504,874,855,491,495,763,726,474,220,511,799,38,6,30,645,122,616,251,1,415,329,188,879,839,215,555,639,368,400,427,49,654,180,37,858,823,667,398,205,383,14,741,262,318,145,236,918,369,141,709,247,773,451,81,254,965,990,783,11,86,31,176,608,931,432,846,731,113,524,837,939,610,586,506,642,593,160,300,838,698,953,10,88,994,767,434,532,340,956,189,123,310,229,884,390,982,438,751,770,280,604,898,958,685,913,867,192,497,688,699,336,864,692,268,107,777,630,423,724,370,282,184,672,365,304,671,663,881,442,860,421,331,757,372,324,35,174,983,56,235,311,7,99,169,121,625,97,529,87,306,298,33,933,566,206,190,607,354,36,977,869,536,34,335,791,600,530,89,781,164,896,482,657,507,847,59,618,24,574,925,775,446,613,951,460,810,995,843,132,996,944,755,675,594,214,955,534,484,876,793,570,543,499,737,521,374,571,27,768,494,673,701,386,689,83,39,448,25,45,163,769,966,851,549,406,404,934,116,683,619,55,463,138,894,597,508,825,693,653,804,413,963,387,902,267,51,455,856,209,926,973,139,987,505,708,579,80,595,193,153,67,743,26,766,705,695,596,503,747,560,52,660,969,765,754,66,519,210,253,127,108,140,339,477,221,152,845,241,263,568,449,475,48,162,144,749,260,591,265,409,656,148,243,802,559,493,883,197,28,590,64,327,819,458,60,77,389,103,684,779,520,854,621,187,646,715,976,533,364,905,680,173,540,640,732,305,101,880,678,447,410,943,444,809,435,325,911,818,544,842,136,998,143,564,476,284,629,992,903,239,178,914,885,468,110,580,76,652,550,900,832,707,137,786,65,780,975,677,679,492,471,703,223,904,250,29,954,8,841,697,603,722,940,308,222,829,870,62,862,385,218,648,993,924,445,764,332,330,583,752,417,353,179,98,788,930,518,828,350,321,952,945,405,557,185,713,181,2,407,301,946,480,834,501,762,889,355,901,551,863,669,984,950,875,302,513,326,949,457,158,114,15,155,401,303,972,408,784,343,723,730,258,147,554,588,637,606,696,665,738,358,572,433,397,428,577,805,328,240,787,134,748,712,172,112
            };

                // Arrange
                var map = new RobinhoodMap<string, string>();

                foreach (var key in keys)
                {
                    map.Emplace(key.ToString(), key.ToString());
                }

                foreach (var key in keys)
                {
                    // Act
                    var result = map.Get(key.ToString(), out var x);

                    if (!result)
                    {
                        Assert.Fail(key.ToString());
                    }
                }
            }
        }
    }
}
